---
- name: Create Docker Stop Script 
  copy:
    dest: /etc/stop-docker-containers.sh
    content: |
      #!/bin/bash

      # Function to log messages
      log_message() {
          echo "$(date) - $1"
      }

      # Fetch running containers
      RUNNING_CONTAINERS=$(docker ps -q)

      if [ -z "$RUNNING_CONTAINERS" ]; then
          log_message "No running Docker containers to stop."
      else
          log_message "Stopping the following Docker containers:"
          docker ps --filter "status=running"

          # Attempt to stop all running containers and log errors
          if ! docker rm -f $RUNNING_CONTAINERS 2>&1 | tee -a /var/log/stop-docker-containers.log; then
              log_message "Errors occurred while stopping containers. Check /var/log/stop-docker-containers.log for details."
          else
              log_message "All running containers have been stopped successfully."
          fi
      fi

      # Always exit with success code
      exit 0

- name: Create the SystemD Service
  copy:
    dest: /etc/systemd/system/stop-docker-containers.service
    content: |
      [Unit]
      Description=Stop all running Docker containers
      Documentation=man:docker
      After=network.target docker.service
      Requires=docker.service

      [Service]
      Type=oneshot
      ExecStart=/bin/bash /etc/stop-docker-containers.sh
      TimeoutStartSec=0
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target

- name: Start the docker-containers Service
  systemd:
    name: stop-docker-containers
    enabled: yes
    state: started

- name: Write cleanup_docker_images 
  copy:
    src: cleanup_docker_images.sh
    dest: /usr/local/bin/cleanup_docker_images.sh
    mode: '0755'


- name: Deploy systemd service file
  copy:
    content: |
      [Unit]
      Description=Cleanup Docker images older than 48 hours
      Wants=cleanup-docker-images.timer

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/cleanup_docker_images.sh

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/cleanup-docker-images.service

- name: Deploy systemd timer file
  copy:
    content: |
      [Unit]
      Description=Run Docker images cleanup daily

      [Timer]
      OnCalendar=daily
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /etc/systemd/system/cleanup-docker-images.timer

- name: Reload systemd to recognize new units
  systemd:
    daemon_reload: yes

- name: Enable and start the timer
  systemd:
    name: cleanup-docker-images.timer
    enabled: yes
    state: started